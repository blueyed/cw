#!/bin/sh
A=--[[ exec @LUA@ "$0" "$@"  # -*- mode: lua; -*- ]]A

prog = { name = "@PACKAGE@" }

-- Remove current directory from package.path
package.path = package.path:gsub (";%./%?%.lua", ""):gsub ("^%./%?%.lua;", "")

-- Fudge package.cpath when running in-tree
local IN_TREE_LUA_PATH = "@in_tree_lua_path@"
if IN_TREE_LUA_PATH ~= "" then
  package.cpath = IN_TREE_LUA_PATH .. ";" .. package.cpath
end

require "std"
local posix = require "posix"
local cw = require "consolewrap"
local colors = require "ansicolors"

local scrname = arg[1]
local base_scrname = posix.basename(scrname or arg[0])

if #arg < 1 or arg[1] == "--help" then
  io.stderr:write ("Usage: not for direct use; use via definition files (see cw(1)):\n" ..
                   "  --version             display version information and exit\n" ..
                   "  --help                display this help and exit\n")
  os.exit ()
elseif arg[1] == "--version" then
  io.stderr:write ("cw (color wrapper) v@VERSION@\n")
  os.exit ()
end

-- Filter a directory out of a PATH-like colon-separated path list.
local function remove_dir_from_path(path, dir)
  local canon_dir = cw.canonicalize_file_name (dir)
  return table.concat (list.filter (function (s) return cw.canonicalize_file_name (s) ~= canon_dir end,
                                    path:split (":")), ":")
end

posix.setenv ("PATH", remove_dir_from_path (os.getenv("PATH"), "@pkglibexecdir@"))

local colormap = {}

-- Convert a lexical class to a color, defaulting to the color of the base class.
local function class_to_color (class)
  return colormap[class] or colormap["base"]
end

-- Set user color map.
local function setcolors (str)
  for ass in list.elems (str:split (":")) do
    local class, col = unpack (ass:split ("="))
    if not class or #class == 0 then
      die ("class missing.")
    end
    if not col or #col == 0 then
      die ("color missing.")
    end
    colormap[class] = colors.noReset ("%{reset " .. col .. "}")
  end
end

setcolors ("base=reset") -- Ensure there is a "base" class
setcolors (os.getenv ("CW_COLORS") or (os.getenv ("CW_INVERT") and
  "base=yellow:bright=bright yellow:highlight=bright magenta:lowlight=magenta:neutral=bright black:warning=bright blue:error=bright red:punctuation=bright green" or
  "base=cyan:bright=bright cyan:highlight=bright green:lowlight=green:neutral=bright white:warning=bright yellow:error=bright red:punctuation=bright blue"))
local nocolor = os.getenv("NOCOLOR") or os.getenv("TERM") == "dumb" -- read NOCOLOR before definition script

local matches = list.new ()

function match (class, regex)
  table.insert (matches, {col = class_to_color (class), regex = regex})
end

-- Create a coloring array for a string.
local function make_colors (s)
  local cols = list.rep ({class_to_color ("base")}, #s) -- Fill color array with base color.
  for m in matches:elems () do
    for c in list.elems (s:finds (m.regex)) do
      local from, to = unpack (c)
      cols = cols:sub (1, from - 1) .. list.rep ({m.col}, to - from + 1) .. cols:sub (to + 1)
    end
  end
 return cols
end

-- Color a string given a coloring array.
local function apply_colors (s, color)
  local tbuf = ""
  local col -- nil guarantees immediate change of color
  for i = 1, #s do
    if col ~= color[i] then
      col = color[i]
      tbuf = tbuf .. col
    end
    tbuf = tbuf .. s[i]
  end
  if col ~= "reset" then
    tbuf = tbuf .. colors.noReset ("%{reset}")
  end
  return tbuf
end

-- Color a string based on the definition file.
local function convert_string (s)
  return apply_colors (s, make_colors (s))
end

-- Run definition script
table.remove (arg, 1)
table.merge (arg, table.invert (arg)) -- add arguments as keys
local ok, msg = pcall (dofile, scrname)
if ok == false then
  die ("error in definition file: " .. msg)
end

local color_stdout = posix.isatty (posix.STDOUT_FILENO) == 1
local color_stderr = posix.isatty (posix.STDERR_FILENO) == 1
if not nocolor and (color_stdout or color_stderr) then
  local ret = cw.wrap_child (convert_string, color_stdout, color_stderr)
  if ret then -- Non-nil, so in parent process, or fork failed
    os.exit (ret)
  end
end

-- Child process
local cmd = base_scrname
if command then
  if not type (command) == "string" then
    die ("invalid command given.")
  end
  cmd = "/bin/sh"
  arg = {[0] = base_scrname, "-c", command}
else
  arg[0] = nil
end
posix.execp (cmd, arg)
-- FIXME: turn off coloring for error
die ("could not run command: " .. cmd)
