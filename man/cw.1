.\" color wrapper manual page.
.TH "CW" "1" "August 2004" "v9/fakehalo" "Text Manipulation"
.SH "NAME"
cw \- color wrapper for common unix commands
.SH "SYNOPSIS"
.B cw
[\fI\-v\fR|\fI\-V\fR]
.SH "DESCRIPTION"
.PP 
\fBcw\fR is a free color wrapper designed to be a color gateway between programs and the output they produce.  
The colors applied are based on the definition instructions in a cw executable file.  These definition files appear under the same name as the program they are executing, except they are located in \fBNONE/lib/cw/\fR.  The cw executable file in \fBNONE/lib/cw/\fR will have a \fBpath\fR definition instruction in it to point it to the real program.

If a cw executable file has an '@' on the end of the filename cw will assume the file is text, instead of a program, and will use the \fBpath\fR definition instruction as a path to the text file.

The \fBpath\fR (or \fBother\fR) definition instruction is the only required definition in a cw executable file.

.TP 
\fBpath\fR [\fIpath:path:...\fR]
path list separated by colons to the program being wrapped.  \fB<env>\fR can be inserted to use the \fBPATH\fR environmental variable (traditional $PATH\-style format)
.TP 
\fBother\fR [\fIprogram\fR]
uses specific program(s), in shell execution format, instead of using \fBpath\fR to find and execute the program.  "\fB{}\fR" can be used in the \fBprogram\fR string to insert the command\-line arguments  (\fBpath\fR and \fBother\fR can not be used with each other)
.TP 
\fBifarg\fR [\fItext:text:...\fR]
list separated by colons which will be compared against the arguments called to the program.  if the \fBtext\fR matches the arguments, then the definitions to follow will be used\-\-otherwise they will not.  this will continue until the next \fBifarg\fR, \fBifnarg\fR or \fBifarg\-else\fR definition instruction is used.  regex comparisons can be made instead of standard string comparisons by using the \fBuseifregex\fR definition instruction ("\fB<any>\fR" can be used as a constant value for any value, including no value.  "\fB<none>\fR" can be used as a constant value for no command\-line arguments)
.TP 
\fBifnarg\fR [\fItext:text:...\fR]
reverse of \fBifarg\fR
.TP 
\fBifarg\-else\fR
this will use the definitions to follow if the previous \fBifarg\fR or \fBifnarg\fR was false
.TP 
\fBifexit\fR [\fIvalue\fR]
compares the \fBvalue\fR to the last returned exit code from the \fB!\fR and \fB@\fR definition instructions.  if the \fBvalue\fR matches, then the definitions to follow will be used\-\-otherwise they will not.  this will continue until the next \fBifexit\fR, \fBifnexit\fR or \fBifexit\-else\fR definition instruction is used.  this definition instruction is intended to create a gateway to the system to check for special scenarios in the form of user\-made scripts/programs.  \fBifexit\fR definition instructions are a higher priority than \fBifarg\fR.  \fBvalue\fR must be a numerical value between \-127 and 127, if nothing is placed in \fBvalue\fR it will default to \-1 ("\fB<any>\fR" can be used as a constant value for any value.  "\fB<pseudo>\fR" can be used as a constant value for non\-existent support of \fBifexit\fR and \fBifnexit\fR, it will only match if not supported) {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBw\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBifnexit\fR [\fIvalue\fR]
reverse of \fBifexit\fR {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBw\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBifexit\-else\fR
this will use the definitions to follow if the previous \fBifexit\fR or \fBifnexit\fR was false {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBw\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBifos\fR [\fItext:text:...\fR]
list separated by colons which will be compared against the operating system name (equal to uname \-s).  if the \fBtext\fR matches the operating system name, then the definitions to follow will be used\-\-otherwise they will not.  this will continue until the next \fBifos\fR, \fBifnos\fR or \fBifos\-else\fR definition instruction is used.  \fBifos\fR definition instructions are a higher priority than \fBifarg\fR and \fBifexit\fR.  regex comparisons can be made instead of standard string comparisons by using the \fBuseifregex\fR definition instruction ("\fB<any>\fR" can be used as a constant value for any value, including no value.  "\fB<pseudo>\fR" can be used as a constant value for non\-existent support of \fBifos\fR and \fBifnos\fR, it will only match if not supported) {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBo\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBifnos\fR [\fItext:text:...\fR]
reverse of \fBifos\fR {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBo\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBifos\-else\fR
this will use the definitions to follow if the previous \fBifos\fR or \fBifnos\fR was false {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBo\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBbase\fR [\fIcolor\fR]
color used if no other definitions state otherwise (if this is the only definition used it will be ignored)
.TP 
\fBmatch\fR [\fIbefore color:after color\fR] [\fImatch text\fR]
changes the color before and after the \fBmatch text\fR, if the \fBmatch text\fR matched output from the program.  \fB{?}\fR is a single character wildcard that can be placed in \fBmatch text\fR.  the \fBregex\fR definition instruction is recommended for more complex matching
.TP 
\fBregex\fR [\fIbefore color:after color\fR] [\fIregex pattern\fR]
changes the color before and after the \fBregex pattern\fR, if the \fBregex pattern\fR matched output from the program.  be aware that regex matching is the last definition instruction to be compared against output text, as such it can have an adverse effect on the previous (coloring) definition instructions.  it is recommended to use the \fBmatch\fR definition instruction if pattern matching is not necessary, this is  because (cpu) processing is much faster with the \fBmatch\fR definition instruction (see the regex.7 manual page, which should already be on your system, for matching guidelines) {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBr\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBtoken\fR [\fIbefore color:after color\fR] [\fIslot value\fR] [\fIdelim value\fR] 
changes the color before and after the \fBslot value\fR based on the \fBdelim value\fR.  the \fBdelim value\fR is equal to a single ASCII character in the form of 1\-255 which is used as a start/stop point to assign each \fBslot value\fR
(32, a space, is the most commonly used \fBdelim value\fR) 
.TP 
\fBdigit\fR [\fIbefore color:after color\fR]
changes the color before and after any number (0\-9)
.TP 
\fBucase\fR [\fIbefore color:after color\fR]
changes the color before and after any uppercase letter (A\-Z)
.TP 
\fBlcase\fR [\fIbefore color:after color\fR]
changes the color before and after any lowercase letter (a\-z)
.TP 
\fBremap\fR [\fIcolor\fR] [\fI##;##\fR | \fIcolor\fR]
remaps the internal \fBcolor\fR value to the ANSI value "^[[\fB##;##\fRm"(where \fB#\fR is a single digit and only the \fB##;##\fR should be supplied) or \fBcolor\fR (original/un\-remapped).  (ex. "remap grey 30;47" would change the \fBgrey\fR color to a grey highlighted effect)
.TP 
\fBsupermap\fR [\fImapname\fR]
changes the internal color format to an entirely different color format (i.e. non\-ANSI), this is intended for special non\-console coloring situations.  supermaps are internal and can be listed by running \fBcw \-V\fR.  if \fBsupermap\fR and \fBremap\fR are both defined, then \fBsupermap\fR will be forcefully disabled due to potential internal conflicts
.TP 
\fBproctitle\fR [\fItitle\fR]
changes the process title to the provided \fBtitle\fR, this is will change how the program appears in programs like \fBps\fR and \fBw\fR {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBs\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBprint\fR [\fIstring\fR]
prints the \fBstring\fR to standard output as it is placed in the definition file.  a linefeed is not automatically placed on the end of the \fBstring\fR, it is expected for the user to handle this.  \fB\\\\, \\e, \\r, \\n, \\t, \\v, \\x\fR??\fB, \\C[\fRcolor\fB]\fR are supported conversions.  if color conversions (\fB\\C\fR) are used in the \fBstring\fR, then the \fBprint\fR definition instruction should be placed after the \fBsupermap\fR definition instruction, if they are present in the definition file (\fB\\x\fR where available)
.TP 
\fBheader\fR [\fIfile\fR]
displays the contents of \fBfile\fR before any output of the real program
.TP 
\fBfooter\fR [\fIfile\fR]
displays the contents of \fBfile\fR after the last output of the real program
.TP 
\fBlborder\fR [\fIstring\fR]
prepends the \fBstring\fR to each (colored) line, this is intended for special processing outside of cw.  the \fBstring\fR is not colored
.TP 
\fBrborder\fR [\fIstring\fR]
appends the \fBstring\fR to each (colored) line, this is intended for special processing outside of cw.  the \fBstring\fR is not colored
.TP 
\fBlimit\fR [\fInumber\fR]
only displays \fBnumber\fR of characters per line. ("\fBcolumns\fR" to use the environmental variable $COLUMNS instead of a static value)
.TP 
\fBwait\fR [\fIsecs\fR] [\fIusecs\fR]
number of extra \fBsecs\fR and \fBusecs\fR to wait for output after the real program has exited.  this definition is rarely necessary
.TP 
\fBusepty\fR
allocates a pty to emulate a programs natural environment.  this can be useful for programs that expect a terminal to be used, this may include programs that appear to hang and dump text either when the program exits or in large chunks while running. {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBp\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBuseifregex\fR
enables use of regex comparisons instead of standard string comparisons for the \fBifarg\fR and \fBifos\fR definition instructions {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBr\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBclear\fR
clears the screen before the program is started
.TP 
\fBforcecolor\fR
forces color wrapping no matter what anti\-coloring measures are enabled
.TP 
\fBnocolor\fR
turns off all coloring (the only real purpose of this is for \fBif\fR\-related definition instructions)
.TP 
\fBnoextendedregex\fR
turns off extended regex (REG_EXTENDED) support (not likely to want to use this, but it's here if needed) {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBr\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBnopipe\fR
turns off color wrapping if the program is being piped/redirected. (non\-interactive coloring measure) {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBt\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBnobackground\fR
will disable the capability to stop (\fB^Z\fR) the program {THIS MAY BE FORCED ANYWAYS, DEPENDING ON SUPPORT INCLUDED UPON COMPILE}
.TP 
\fBnoaddhelp\fR
will not display cw help information when \fB\-\-help\fR is used in the program arguments
.TP 
\fBnoeol\fR
disables the (reset color) value placed on the end of each line
.TP 
\fBnostrip\fR
turns off ansi stripping of the programs output (rarely used; only to modify colors that already exist or have ANSI placement codes)
.TP 
\fBnowarnings\fR
disables non\-critical definition file error messages for the definition instructions that follow.
.TP 
\fBwarnings\fR
enables non\-critical definition file error messages for the definition instructions that follow.
.TP 
\fB!\fR[\fIprogram\fR]
executes the \fBprogram\fR string as it is placed in the definition file.  this is intended to either simply run a program before the wrapped program, or for special purposes relating to the \fBifexit\fR definition instructions.  "\fB{}\fR" can be used in the \fBprogram\fR string to insert the command\-line arguments (the \fBprogram\fR string is in a shell execution format)
.TP 
\fB@\fR[\fIprogram\fR]
this is the same as \fB!\fR, except it does not display the output or allow input
.TP 
\fB$\fR[\fIVAR\fR]\fI=\fR[\fIVALUE\fR]
sets the environmental variable \fBVAR\fR to \fBVALUE\fR {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBe\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fB#\fR[\fItext\fR]
ignores the following \fBtext\fR for processing. (for comments)
.TP 
The color values used are in the text form of:
\fBblack, blue, green, cyan, red, purple, brown, grey+, grey, blue+, green+, cyan+, red+, purple+, yellow, white, default, none\fR
.TP 
Colors with a \fB+\fR designate a brighter color.

.SH "ARGUMENTS"
Command\-line arguments may be inserted to change some attributes of cw.  These arguments are not for direct use with the cw binary, they are to be inserted in with any other arguments passed to the cw definition file.  For example \fBdf \-\-cw\-nocolor \-h\fR would disable coloring and run \fBdf \-h\fR.

All of the following arguments are explained in more detail elsewhere in this manual page.  The following are brief descriptions.

.TP 
\fB+co, \-\-cw\-colorize=color\fR[\fB:color\fR]
sets the colors to the provided arguments
.TP 
\fB+iv, \-\-cw\-invert\fR
inverts the internal color map
.TP 
\fB+nc, \-\-cw\-nocolor\fR
disables color wrapping of the program
.TP 
\fB+py, \-\-cw\-usepty\fR
allocates a pseudo terminal {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBp\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fB+sm, \-\-cw\-supermap=mapname\fR
changes the color format used (run \fBcw \-V\fR to see the supported supermaps)
.SH "ENVIRONMENT"
.PP 
.TP 
\fBNOCOLOR\fR
disables color wrapping (any value placed in the variable will enable)
.TP 
\fBNOCOLOR_NEXT\fR
disables color wrapping at the next process using color wrapper.  this is mainly useful to include in cw definition files if the program being wrapped is using other commands that are already being wrapped (this is not like stripping, it is for stopping colors from being processed as values by programs, any value placed in the variable will enable)
.TP 
\fBNOCOLOR_PIPE\fR
disables color wrapping if the program is being piped/redirected (non\-interactive coloring measure, any value placed in the variable will enable) {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBt\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBCW_SHLVL\fR
disables color wrapping if the value this variable is set to does NOT equal \fBSHLVL\fR (set by bash/tcsh).  this is intended to help prevent unwanted coloring outside of the current users shell (usually should be set to 1)
.TP 
\fBCW_CHK_NOCOLOR\fR
disables color wrapping if the program/shell expression placed in the variable returns a non\-zero exit code.  this is intended to help prevent unwanted coloring on a system\-specific basis.  "\fB{}\fR" can be used in the variable to insert the command\-line arguments {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBw\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBCW_CHK_SETCODE\fR
sets the internal exit code to the exit code returned by the program/shell expression placed in the variable to be used with the \fBifexit\fR definition instructions, provided no \fB!\fR or \fB@\fR definition instructions are called before.  "\fB{}\fR" can be used in the variable to insert the command\-line arguments {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBw\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBCW_USEPTY\fR
allocates a pty to emulate a programs natural environment.  this can be useful for programs that expect a terminal to be used, this may include programs that appear to hang and dump text either when the program exits or in large chunks while running. (any value placed in the variable will enable) {THIS MAY NOT BE INCLUDED UPON COMPILE, RUN \fBcw \-v\fR TO SEE IF "\fBp\fR" IS INCLUDED IN THE SUPPORT}
.TP 
\fBCW_INVERT\fR
re\-defines the internal colormap to the opposite colors.  this is intended to help terminals with white backgrounds become more readable (any value placed in the variable will enable)
.TP 
\fBCW_COLORIZE\fR
defines a static colorset to override the definition file (and \fBCW_INVERT\fR) colors.  this is intended to help make a uniform color scheme.  the format is \fBCW_COLORIZE=color\fR[\fB:color\fR] ('[' and ']' are not included).  if a second color is provided you may use any colors desired for both fields, however if you place just one color in the variable it must be one of the following colors: \fBblack, blue, green, cyan, red, purple, brown, grey, grey+\fR (using the dual color entry style can cause irregular coloring using offbeat combinations do to the method being used to colorize, it is recommended to use the single entry style)
.TP 
\fBCW_REMAP\fR
remaps one or more internal color(s) to ANSI values or other internal color values.  this is useful for remapping colors to special ANSI (code) values or more advanced color scheming (than \fBCW_COLORIZE\fR).  the colors \fBdefault\fR and \fBnone\fR may not be remapped or used.  the format is \fBCW_REMAP=color=\fR[\fB##;##\fR|\fBcolor\fR]\fB:color=\fR[\fB##;##\fR|\fBcolor\fR]\fB:...\fR ('#' stands for a single digit, which forms the ANSI code; '|' stands for "or", and the '|' is not included; '[' and ']' are not included)
.TP 
\fBCW_SUPERMAP\fR
changes the internal color format to an entirely different color format (i.e. non\-ANSI), this is intended for special non\-console coloring situations.  supermaps are internal and can be listed by running \fBcw \-V\fR.  if a supermap and a remap are both defined, then the supermap will be forcefully disabled due to potential internal conflicts
.TP 
\fBCW_HEADER\fR
defines the path to a text file to display before the program is launched (the \fBheader\fR definition instruction overrides this)
.TP 
\fBCW_FOOTER\fR
defines the path to a text file to display after the program has completed (the \fBfooter\fR definition instruction overrides this)
.TP 
\fBCW_LBORDER\fR
prepends the data in the variable to each (colored) line, this is intended for special processing outside of cw.  the data in the variable is not colored
.TP 
\fBCW_RBORDER\fR
appends the data in the variable to each (colored) line, this is intended for special processing outside of cw.  the data in the variable is not colored
.TP 
\fBCW_CLEAR\fR
clears the screen before any program (wrapped by cw) starts (any value placed in the variable will enable)
.SH "AUTHOR"
Written by v9/fakehalo. [v9@fakehalo.us]
.SH "BUGS"
Report bugs to <v9@fakehalo.us>.
.SH "COPYRIGHT"
Copyright \(co 2004 v9/fakehalo.
.br 
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
cwu(1) cwe(1)
